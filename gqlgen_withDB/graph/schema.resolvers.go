package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.72

import (
	"context"

	databaseconnector "github.com/rohith-kola/GraphQL-GoLang/gqlgen_withDB/databaseConnector"
	"github.com/rohith-kola/GraphQL-GoLang/gqlgen_withDB/graph/model"
)

// SaveCustomer is the resolver for the saveCustomer field.
func (r *mutationResolver) SaveCustomer(ctx context.Context, input model.NewCustomer) (bool, error) {
	var _, err = databaseconnector.CreateUser(input.CustomerID, input.Username, input.Email, int(input.Age), input.MetaData)
	if err != nil {
		return false, err
	}
	return true, nil
}

// CreateDb is the resolver for the createDB field.
func (r *mutationResolver) CreateDb(ctx context.Context, tableName string) (bool, error) {
	var err error = databaseconnector.CreateDB(tableName)
	if err != nil {
		return false, err
	}
	return true, nil
}

// GetCustomer is the resolver for the getCustomer field.
func (r *queryResolver) GetCustomer(ctx context.Context, customerID string) (*model.Customer, error) {
	// var cid, _ = strconv.Atoi(customerID)
	// if err != nil {
	// 	return nil, err
	// }
	customer, err := databaseconnector.GetUserByID(customerID)
	if err != nil {
		return nil, err
	}

	// Convert metaData from bytestream to string
	jsonbText, err := customer.MetaData.Value()
	jsonString := string(jsonbText.([]byte))

	var c model.Customer = model.Customer{
		CustomerID: customer.CustomerID,
		Username:   customer.Username,
		Email:      customer.Email,
		Age:        int32(customer.Age),
		MetaData:   jsonString,
	}
	return &c, nil
}

// GetCustomerByMetaData is the resolver for the getCustomerByMetaData field.
func (r *queryResolver) GetCustomerByMetaData(ctx context.Context, metaData string) (*model.Customer, error) {

	customer, err := databaseconnector.GetUserByMetaData(metaData)
	if err != nil {
		return nil, err
	}

	// Convert metaData from bytestream to string
	jsonbText, err := customer.MetaData.Value()
	jsonString := string(jsonbText.([]byte))

	var c model.Customer = model.Customer{
		CustomerID: customer.CustomerID,
		Username:   customer.Username,
		Email:      customer.Email,
		Age:        int32(customer.Age),
		MetaData:   jsonString,
	}
	return &c, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//  - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//    it when you're done.
//  - You have helper methods in this file. Move them out to keep these resolver files clean.
/*
	func (r *mutationResolver) CreateTodo(ctx context.Context, input model.NewTodo) (*model.Todo, error) {
	panic(fmt.Errorf("not implemented: CreateTodo - createTodo"))
}
func (r *queryResolver) Todos(ctx context.Context) ([]*model.Todo, error) {
	panic(fmt.Errorf("not implemented: Todos - todos"))
}
*/
